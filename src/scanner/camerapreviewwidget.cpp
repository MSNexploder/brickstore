// Copyright (C) 2004-2023 Robert Griebl
// SPDX-License-Identifier: GPL-3.0-only

#include <QtCore/QCoreApplication>
#include <QtWidgets/QVBoxLayout>
#include <QtGui/QHelpEvent>
#include <QtQuick/QQuickView>
#include <QtQuick/QQuickItem>

#include "camerapreview.h" // generated by qmltc
#include "camerapreviewwidget.h"


CameraPreviewWidget::CameraPreviewWidget(QQmlEngine *engine, QWidget *parent)
    : QWidget(parent)
{
    setFocusPolicy(Qt::NoFocus);

    auto layout = new QVBoxLayout(this);
    layout->setContentsMargins(0, 0, 0, 0);

    m_window = engine ? new QQuickView(engine, nullptr) : new QQuickView();
    m_window->setResizeMode(QQuickView::SizeRootObjectToView);
    m_window->setColor(Qt::black);

    m_cameraPreview = new Scanner::CameraPreview(engine);
    m_cameraPreview->setParentItem(m_window->contentItem());
    m_widget = QWidget::createWindowContainer(m_window, this);

    connect(m_cameraPreview, &Scanner::CameraPreview::clicked,
            this, &CameraPreviewWidget::clicked);

    int videoWidth = logicalDpiX() * 3; // ~7.5cm on-screen
    m_widget->setMinimumSize(videoWidth, videoWidth * 9 / 16);
    m_widget->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);

    layout->addWidget(m_widget, 10);
}

CameraPreviewWidget::~CameraPreviewWidget()
{
    delete m_widget;
    m_widget = nullptr;
}

bool CameraPreviewWidget::isActive() const
{
    return m_cameraPreview->active();
}

void CameraPreviewWidget::setActive(bool newActive)
{
    m_cameraPreview->setActive(newActive);
}

QObject *CameraPreviewWidget::videoOutput() const
{
    return m_cameraPreview;
}
